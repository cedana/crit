// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.0
// source: img-streamer.proto

package img_streamer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This message is sent from CRIU to the streamer.
//   - During dump, it communicates the name of the file that is about to be sent
//     to the streamer.
//   - During restore, CRIU requests image files from the streamer. The message is
//     used to communicate the name of the desired file.
type ImgStreamerRequestEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      *string                `protobuf:"bytes,1,req,name=filename" json:"filename,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImgStreamerRequestEntry) Reset() {
	*x = ImgStreamerRequestEntry{}
	mi := &file_img_streamer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImgStreamerRequestEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImgStreamerRequestEntry) ProtoMessage() {}

func (x *ImgStreamerRequestEntry) ProtoReflect() protoreflect.Message {
	mi := &file_img_streamer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImgStreamerRequestEntry.ProtoReflect.Descriptor instead.
func (*ImgStreamerRequestEntry) Descriptor() ([]byte, []int) {
	return file_img_streamer_proto_rawDescGZIP(), []int{0}
}

func (x *ImgStreamerRequestEntry) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

// This message is sent from the streamer to CRIU. It is only used during
// restore to report whether the requested file exists.
type ImgStreamerReplyEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exists        *bool                  `protobuf:"varint,1,req,name=exists" json:"exists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImgStreamerReplyEntry) Reset() {
	*x = ImgStreamerReplyEntry{}
	mi := &file_img_streamer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImgStreamerReplyEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImgStreamerReplyEntry) ProtoMessage() {}

func (x *ImgStreamerReplyEntry) ProtoReflect() protoreflect.Message {
	mi := &file_img_streamer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImgStreamerReplyEntry.ProtoReflect.Descriptor instead.
func (*ImgStreamerReplyEntry) Descriptor() ([]byte, []int) {
	return file_img_streamer_proto_rawDescGZIP(), []int{1}
}

func (x *ImgStreamerReplyEntry) GetExists() bool {
	if x != nil && x.Exists != nil {
		return *x.Exists
	}
	return false
}

var File_img_streamer_proto protoreflect.FileDescriptor

const file_img_streamer_proto_rawDesc = "" +
	"\n" +
	"\x12img-streamer.proto\"8\n" +
	"\x1aimg_streamer_request_entry\x12\x1a\n" +
	"\bfilename\x18\x01 \x02(\tR\bfilename\"2\n" +
	"\x18img_streamer_reply_entry\x12\x16\n" +
	"\x06exists\x18\x01 \x02(\bR\x06exists"

var (
	file_img_streamer_proto_rawDescOnce sync.Once
	file_img_streamer_proto_rawDescData []byte
)

func file_img_streamer_proto_rawDescGZIP() []byte {
	file_img_streamer_proto_rawDescOnce.Do(func() {
		file_img_streamer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_img_streamer_proto_rawDesc), len(file_img_streamer_proto_rawDesc)))
	})
	return file_img_streamer_proto_rawDescData
}

var file_img_streamer_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_img_streamer_proto_goTypes = []any{
	(*ImgStreamerRequestEntry)(nil), // 0: img_streamer_request_entry
	(*ImgStreamerReplyEntry)(nil),   // 1: img_streamer_reply_entry
}
var file_img_streamer_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_img_streamer_proto_init() }
func file_img_streamer_proto_init() {
	if File_img_streamer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_img_streamer_proto_rawDesc), len(file_img_streamer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_img_streamer_proto_goTypes,
		DependencyIndexes: file_img_streamer_proto_depIdxs,
		MessageInfos:      file_img_streamer_proto_msgTypes,
	}.Build()
	File_img_streamer_proto = out.File
	file_img_streamer_proto_goTypes = nil
	file_img_streamer_proto_depIdxs = nil
}
