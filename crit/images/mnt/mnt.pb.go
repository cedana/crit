// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.0
// source: mnt.proto

package mnt

import (
	_ "github.com/cedana/go-criu/v7/crit/images/opts"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Fstype int32

const (
	Fstype_UNSUPPORTED Fstype = 0
	Fstype_PROC        Fstype = 1
	Fstype_SYSFS       Fstype = 2
	Fstype_DEVTMPFS    Fstype = 3
	Fstype_BINFMT_MISC Fstype = 4
	Fstype_TMPFS       Fstype = 5
	Fstype_DEVPTS      Fstype = 6
	Fstype_SIMFS       Fstype = 7
	Fstype_PSTORE      Fstype = 8
	Fstype_SECURITYFS  Fstype = 9
	Fstype_FUSECTL     Fstype = 10
	Fstype_DEBUGFS     Fstype = 11
	Fstype_CGROUP      Fstype = 12
	Fstype_AUFS        Fstype = 13
	Fstype_MQUEUE      Fstype = 14
	Fstype_FUSE        Fstype = 15
	Fstype_AUTO        Fstype = 16
	Fstype_OVERLAYFS   Fstype = 17
	Fstype_AUTOFS      Fstype = 18
	Fstype_TRACEFS     Fstype = 19
	Fstype_CGROUP2     Fstype = 23
)

// Enum value maps for Fstype.
var (
	Fstype_name = map[int32]string{
		0:  "UNSUPPORTED",
		1:  "PROC",
		2:  "SYSFS",
		3:  "DEVTMPFS",
		4:  "BINFMT_MISC",
		5:  "TMPFS",
		6:  "DEVPTS",
		7:  "SIMFS",
		8:  "PSTORE",
		9:  "SECURITYFS",
		10: "FUSECTL",
		11: "DEBUGFS",
		12: "CGROUP",
		13: "AUFS",
		14: "MQUEUE",
		15: "FUSE",
		16: "AUTO",
		17: "OVERLAYFS",
		18: "AUTOFS",
		19: "TRACEFS",
		23: "CGROUP2",
	}
	Fstype_value = map[string]int32{
		"UNSUPPORTED": 0,
		"PROC":        1,
		"SYSFS":       2,
		"DEVTMPFS":    3,
		"BINFMT_MISC": 4,
		"TMPFS":       5,
		"DEVPTS":      6,
		"SIMFS":       7,
		"PSTORE":      8,
		"SECURITYFS":  9,
		"FUSECTL":     10,
		"DEBUGFS":     11,
		"CGROUP":      12,
		"AUFS":        13,
		"MQUEUE":      14,
		"FUSE":        15,
		"AUTO":        16,
		"OVERLAYFS":   17,
		"AUTOFS":      18,
		"TRACEFS":     19,
		"CGROUP2":     23,
	}
)

func (x Fstype) Enum() *Fstype {
	p := new(Fstype)
	*p = x
	return p
}

func (x Fstype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fstype) Descriptor() protoreflect.EnumDescriptor {
	return file_mnt_proto_enumTypes[0].Descriptor()
}

func (Fstype) Type() protoreflect.EnumType {
	return &file_mnt_proto_enumTypes[0]
}

func (x Fstype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Fstype) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Fstype(num)
	return nil
}

// Deprecated: Use Fstype.Descriptor instead.
func (Fstype) EnumDescriptor() ([]byte, []int) {
	return file_mnt_proto_rawDescGZIP(), []int{0}
}

type MntEntry struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Fstype          *uint32                `protobuf:"varint,1,req,name=fstype" json:"fstype,omitempty"`
	MntId           *uint32                `protobuf:"varint,2,req,name=mnt_id,json=mntId" json:"mnt_id,omitempty"`
	RootDev         *uint32                `protobuf:"varint,3,req,name=root_dev,json=rootDev" json:"root_dev,omitempty"`
	ParentMntId     *uint32                `protobuf:"varint,4,req,name=parent_mnt_id,json=parentMntId" json:"parent_mnt_id,omitempty"`
	Flags           *uint32                `protobuf:"varint,5,req,name=flags" json:"flags,omitempty"`
	Root            *string                `protobuf:"bytes,6,req,name=root" json:"root,omitempty"`
	Mountpoint      *string                `protobuf:"bytes,7,req,name=mountpoint" json:"mountpoint,omitempty"`
	Source          *string                `protobuf:"bytes,8,req,name=source" json:"source,omitempty"`
	Options         *string                `protobuf:"bytes,9,req,name=options" json:"options,omitempty"`
	SharedId        *uint32                `protobuf:"varint,10,opt,name=shared_id,json=sharedId" json:"shared_id,omitempty"`
	MasterId        *uint32                `protobuf:"varint,11,opt,name=master_id,json=masterId" json:"master_id,omitempty"`
	WithPlugin      *bool                  `protobuf:"varint,12,opt,name=with_plugin,json=withPlugin" json:"with_plugin,omitempty"`
	ExtMount        *bool                  `protobuf:"varint,13,opt,name=ext_mount,json=extMount" json:"ext_mount,omitempty"`
	Fsname          *string                `protobuf:"bytes,14,opt,name=fsname" json:"fsname,omitempty"`
	InternalSharing *bool                  `protobuf:"varint,15,opt,name=internal_sharing,json=internalSharing" json:"internal_sharing,omitempty"`
	Deleted         *bool                  `protobuf:"varint,16,opt,name=deleted" json:"deleted,omitempty"`
	SbFlags         *uint32                `protobuf:"varint,17,opt,name=sb_flags,json=sbFlags" json:"sb_flags,omitempty"`
	// user defined mapping for external mount
	ExtKey        *string `protobuf:"bytes,18,opt,name=ext_key,json=extKey" json:"ext_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MntEntry) Reset() {
	*x = MntEntry{}
	mi := &file_mnt_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MntEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MntEntry) ProtoMessage() {}

func (x *MntEntry) ProtoReflect() protoreflect.Message {
	mi := &file_mnt_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MntEntry.ProtoReflect.Descriptor instead.
func (*MntEntry) Descriptor() ([]byte, []int) {
	return file_mnt_proto_rawDescGZIP(), []int{0}
}

func (x *MntEntry) GetFstype() uint32 {
	if x != nil && x.Fstype != nil {
		return *x.Fstype
	}
	return 0
}

func (x *MntEntry) GetMntId() uint32 {
	if x != nil && x.MntId != nil {
		return *x.MntId
	}
	return 0
}

func (x *MntEntry) GetRootDev() uint32 {
	if x != nil && x.RootDev != nil {
		return *x.RootDev
	}
	return 0
}

func (x *MntEntry) GetParentMntId() uint32 {
	if x != nil && x.ParentMntId != nil {
		return *x.ParentMntId
	}
	return 0
}

func (x *MntEntry) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *MntEntry) GetRoot() string {
	if x != nil && x.Root != nil {
		return *x.Root
	}
	return ""
}

func (x *MntEntry) GetMountpoint() string {
	if x != nil && x.Mountpoint != nil {
		return *x.Mountpoint
	}
	return ""
}

func (x *MntEntry) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *MntEntry) GetOptions() string {
	if x != nil && x.Options != nil {
		return *x.Options
	}
	return ""
}

func (x *MntEntry) GetSharedId() uint32 {
	if x != nil && x.SharedId != nil {
		return *x.SharedId
	}
	return 0
}

func (x *MntEntry) GetMasterId() uint32 {
	if x != nil && x.MasterId != nil {
		return *x.MasterId
	}
	return 0
}

func (x *MntEntry) GetWithPlugin() bool {
	if x != nil && x.WithPlugin != nil {
		return *x.WithPlugin
	}
	return false
}

func (x *MntEntry) GetExtMount() bool {
	if x != nil && x.ExtMount != nil {
		return *x.ExtMount
	}
	return false
}

func (x *MntEntry) GetFsname() string {
	if x != nil && x.Fsname != nil {
		return *x.Fsname
	}
	return ""
}

func (x *MntEntry) GetInternalSharing() bool {
	if x != nil && x.InternalSharing != nil {
		return *x.InternalSharing
	}
	return false
}

func (x *MntEntry) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *MntEntry) GetSbFlags() uint32 {
	if x != nil && x.SbFlags != nil {
		return *x.SbFlags
	}
	return 0
}

func (x *MntEntry) GetExtKey() string {
	if x != nil && x.ExtKey != nil {
		return *x.ExtKey
	}
	return ""
}

var File_mnt_proto protoreflect.FileDescriptor

const file_mnt_proto_rawDesc = "" +
	"\n" +
	"\tmnt.proto\x1a\n" +
	"opts.proto\"\x93\x04\n" +
	"\tmnt_entry\x12\x16\n" +
	"\x06fstype\x18\x01 \x02(\rR\x06fstype\x12\x15\n" +
	"\x06mnt_id\x18\x02 \x02(\rR\x05mntId\x12 \n" +
	"\broot_dev\x18\x03 \x02(\rB\x05\xd2?\x02 \x01R\arootDev\x12\"\n" +
	"\rparent_mnt_id\x18\x04 \x02(\rR\vparentMntId\x12\x1b\n" +
	"\x05flags\x18\x05 \x02(\rB\x05\xd2?\x02\b\x01R\x05flags\x12\x12\n" +
	"\x04root\x18\x06 \x02(\tR\x04root\x12\x1e\n" +
	"\n" +
	"mountpoint\x18\a \x02(\tR\n" +
	"mountpoint\x12\x16\n" +
	"\x06source\x18\b \x02(\tR\x06source\x12\x18\n" +
	"\aoptions\x18\t \x02(\tR\aoptions\x12\x1b\n" +
	"\tshared_id\x18\n" +
	" \x01(\rR\bsharedId\x12\x1b\n" +
	"\tmaster_id\x18\v \x01(\rR\bmasterId\x12\x1f\n" +
	"\vwith_plugin\x18\f \x01(\bR\n" +
	"withPlugin\x12\x1b\n" +
	"\text_mount\x18\r \x01(\bR\bextMount\x12\x16\n" +
	"\x06fsname\x18\x0e \x01(\tR\x06fsname\x12)\n" +
	"\x10internal_sharing\x18\x0f \x01(\bR\x0finternalSharing\x12\x18\n" +
	"\adeleted\x18\x10 \x01(\bR\adeleted\x12 \n" +
	"\bsb_flags\x18\x11 \x01(\rB\x05\xd2?\x02\b\x01R\asbFlags\x12\x17\n" +
	"\aext_key\x18\x12 \x01(\tR\x06extKey*\x90\x02\n" +
	"\x06fstype\x12\x0f\n" +
	"\vUNSUPPORTED\x10\x00\x12\b\n" +
	"\x04PROC\x10\x01\x12\t\n" +
	"\x05SYSFS\x10\x02\x12\f\n" +
	"\bDEVTMPFS\x10\x03\x12\x0f\n" +
	"\vBINFMT_MISC\x10\x04\x12\t\n" +
	"\x05TMPFS\x10\x05\x12\n" +
	"\n" +
	"\x06DEVPTS\x10\x06\x12\t\n" +
	"\x05SIMFS\x10\a\x12\n" +
	"\n" +
	"\x06PSTORE\x10\b\x12\x0e\n" +
	"\n" +
	"SECURITYFS\x10\t\x12\v\n" +
	"\aFUSECTL\x10\n" +
	"\x12\v\n" +
	"\aDEBUGFS\x10\v\x12\n" +
	"\n" +
	"\x06CGROUP\x10\f\x12\b\n" +
	"\x04AUFS\x10\r\x12\n" +
	"\n" +
	"\x06MQUEUE\x10\x0e\x12\b\n" +
	"\x04FUSE\x10\x0f\x12\b\n" +
	"\x04AUTO\x10\x10\x12\r\n" +
	"\tOVERLAYFS\x10\x11\x12\n" +
	"\n" +
	"\x06AUTOFS\x10\x12\x12\v\n" +
	"\aTRACEFS\x10\x13\x12\v\n" +
	"\aCGROUP2\x10\x17"

var (
	file_mnt_proto_rawDescOnce sync.Once
	file_mnt_proto_rawDescData []byte
)

func file_mnt_proto_rawDescGZIP() []byte {
	file_mnt_proto_rawDescOnce.Do(func() {
		file_mnt_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mnt_proto_rawDesc), len(file_mnt_proto_rawDesc)))
	})
	return file_mnt_proto_rawDescData
}

var file_mnt_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mnt_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_mnt_proto_goTypes = []any{
	(Fstype)(0),      // 0: fstype
	(*MntEntry)(nil), // 1: mnt_entry
}
var file_mnt_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_mnt_proto_init() }
func file_mnt_proto_init() {
	if File_mnt_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mnt_proto_rawDesc), len(file_mnt_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mnt_proto_goTypes,
		DependencyIndexes: file_mnt_proto_depIdxs,
		EnumInfos:         file_mnt_proto_enumTypes,
		MessageInfos:      file_mnt_proto_msgTypes,
	}.Build()
	File_mnt_proto = out.File
	file_mnt_proto_goTypes = nil
	file_mnt_proto_depIdxs = nil
}
