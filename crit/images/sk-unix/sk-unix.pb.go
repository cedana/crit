// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.0
// source: sk-unix.proto

package sk_unix

import (
	fown "github.com/cedana/go-criu/v7/crit/images/fown"
	_ "github.com/cedana/go-criu/v7/crit/images/opts"
	sk_opts "github.com/cedana/go-criu/v7/crit/images/sk-opts"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FilePermsEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mode          *uint32                `protobuf:"varint,1,req,name=mode" json:"mode,omitempty"`
	Uid           *uint32                `protobuf:"varint,2,req,name=uid" json:"uid,omitempty"`
	Gid           *uint32                `protobuf:"varint,3,req,name=gid" json:"gid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilePermsEntry) Reset() {
	*x = FilePermsEntry{}
	mi := &file_sk_unix_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilePermsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilePermsEntry) ProtoMessage() {}

func (x *FilePermsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_sk_unix_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilePermsEntry.ProtoReflect.Descriptor instead.
func (*FilePermsEntry) Descriptor() ([]byte, []int) {
	return file_sk_unix_proto_rawDescGZIP(), []int{0}
}

func (x *FilePermsEntry) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *FilePermsEntry) GetUid() uint32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *FilePermsEntry) GetGid() uint32 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

type UnixSkEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Few words about why we need both -- id and ino.
	//
	// The former one is used to link file descriptor from
	// fdinfo image with the unix_sk_entry that should be
	// opened under it.
	//
	// The latter one ties together unix peers -- the peer
	// member on this structure is the ino one of its peer
	// and simetimes vise-versa.
	Id      *uint32              `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Ino     *uint32              `protobuf:"varint,2,req,name=ino" json:"ino,omitempty"`
	Type    *uint32              `protobuf:"varint,3,req,name=type" json:"type,omitempty"`
	State   *uint32              `protobuf:"varint,4,req,name=state" json:"state,omitempty"`
	Flags   *uint32              `protobuf:"varint,5,req,name=flags" json:"flags,omitempty"`
	Uflags  *uint32              `protobuf:"varint,6,req,name=uflags" json:"uflags,omitempty"`
	Backlog *uint32              `protobuf:"varint,7,req,name=backlog" json:"backlog,omitempty"`
	Peer    *uint32              `protobuf:"varint,8,req,name=peer" json:"peer,omitempty"`
	Fown    *fown.FownEntry      `protobuf:"bytes,9,req,name=fown" json:"fown,omitempty"`
	Opts    *sk_opts.SkOptsEntry `protobuf:"bytes,10,req,name=opts" json:"opts,omitempty"`
	// Abstract name may contain \0 at any point,
	// so we need to carry it as byte sequence...
	Name      []byte              `protobuf:"bytes,11,req,name=name" json:"name,omitempty"`
	Shutdown  *sk_opts.SkShutdown `protobuf:"varint,12,opt,name=shutdown,enum=SkShutdown" json:"shutdown,omitempty"`
	FilePerms *FilePermsEntry     `protobuf:"bytes,13,opt,name=file_perms,json=filePerms" json:"file_perms,omitempty"`
	// Relative socket name may have prefix.
	NameDir       *string `protobuf:"bytes,14,opt,name=name_dir,json=nameDir" json:"name_dir,omitempty"`
	Deleted       *bool   `protobuf:"varint,15,opt,name=deleted" json:"deleted,omitempty"`
	NsId          *uint32 `protobuf:"varint,16,opt,name=ns_id,json=nsId" json:"ns_id,omitempty"`
	MntId         *int32  `protobuf:"zigzag32,17,opt,name=mnt_id,json=mntId,def=-1" json:"mnt_id,omitempty"` // Please, don't use field with number 18.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for UnixSkEntry fields.
const (
	Default_UnixSkEntry_MntId = int32(-1)
)

func (x *UnixSkEntry) Reset() {
	*x = UnixSkEntry{}
	mi := &file_sk_unix_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnixSkEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnixSkEntry) ProtoMessage() {}

func (x *UnixSkEntry) ProtoReflect() protoreflect.Message {
	mi := &file_sk_unix_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnixSkEntry.ProtoReflect.Descriptor instead.
func (*UnixSkEntry) Descriptor() ([]byte, []int) {
	return file_sk_unix_proto_rawDescGZIP(), []int{1}
}

func (x *UnixSkEntry) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *UnixSkEntry) GetIno() uint32 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *UnixSkEntry) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *UnixSkEntry) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *UnixSkEntry) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *UnixSkEntry) GetUflags() uint32 {
	if x != nil && x.Uflags != nil {
		return *x.Uflags
	}
	return 0
}

func (x *UnixSkEntry) GetBacklog() uint32 {
	if x != nil && x.Backlog != nil {
		return *x.Backlog
	}
	return 0
}

func (x *UnixSkEntry) GetPeer() uint32 {
	if x != nil && x.Peer != nil {
		return *x.Peer
	}
	return 0
}

func (x *UnixSkEntry) GetFown() *fown.FownEntry {
	if x != nil {
		return x.Fown
	}
	return nil
}

func (x *UnixSkEntry) GetOpts() *sk_opts.SkOptsEntry {
	if x != nil {
		return x.Opts
	}
	return nil
}

func (x *UnixSkEntry) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UnixSkEntry) GetShutdown() sk_opts.SkShutdown {
	if x != nil && x.Shutdown != nil {
		return *x.Shutdown
	}
	return sk_opts.SkShutdown(0)
}

func (x *UnixSkEntry) GetFilePerms() *FilePermsEntry {
	if x != nil {
		return x.FilePerms
	}
	return nil
}

func (x *UnixSkEntry) GetNameDir() string {
	if x != nil && x.NameDir != nil {
		return *x.NameDir
	}
	return ""
}

func (x *UnixSkEntry) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *UnixSkEntry) GetNsId() uint32 {
	if x != nil && x.NsId != nil {
		return *x.NsId
	}
	return 0
}

func (x *UnixSkEntry) GetMntId() int32 {
	if x != nil && x.MntId != nil {
		return *x.MntId
	}
	return Default_UnixSkEntry_MntId
}

var File_sk_unix_proto protoreflect.FileDescriptor

const file_sk_unix_proto_rawDesc = "" +
	"\n" +
	"\rsk-unix.proto\x1a\n" +
	"opts.proto\x1a\n" +
	"fown.proto\x1a\rsk-opts.proto\"J\n" +
	"\x10file_perms_entry\x12\x12\n" +
	"\x04mode\x18\x01 \x02(\rR\x04mode\x12\x10\n" +
	"\x03uid\x18\x02 \x02(\rR\x03uid\x12\x10\n" +
	"\x03gid\x18\x03 \x02(\rR\x03gid\"\x81\x04\n" +
	"\runix_sk_entry\x12\x0e\n" +
	"\x02id\x18\x01 \x02(\rR\x02id\x12\x10\n" +
	"\x03ino\x18\x02 \x02(\rR\x03ino\x12\x1b\n" +
	"\x04type\x18\x03 \x02(\rB\a\xd2?\x042\x02skR\x04type\x12\x1d\n" +
	"\x05state\x18\x04 \x02(\rB\a\xd2?\x042\x02skR\x05state\x12\x1b\n" +
	"\x05flags\x18\x05 \x02(\rB\x05\xd2?\x02\b\x01R\x05flags\x12\x1d\n" +
	"\x06uflags\x18\x06 \x02(\rB\x05\xd2?\x02\b\x01R\x06uflags\x12\x18\n" +
	"\abacklog\x18\a \x02(\rR\abacklog\x12\x12\n" +
	"\x04peer\x18\b \x02(\rR\x04peer\x12\x1f\n" +
	"\x04fown\x18\t \x02(\v2\v.fown_entryR\x04fown\x12\"\n" +
	"\x04opts\x18\n" +
	" \x02(\v2\x0e.sk_opts_entryR\x04opts\x12\"\n" +
	"\x04name\x18\v \x02(\fB\x0e\xd2?\v:\tunix_nameR\x04name\x12(\n" +
	"\bshutdown\x18\f \x01(\x0e2\f.sk_shutdownR\bshutdown\x120\n" +
	"\n" +
	"file_perms\x18\r \x01(\v2\x11.file_perms_entryR\tfilePerms\x12\x19\n" +
	"\bname_dir\x18\x0e \x01(\tR\anameDir\x12\x18\n" +
	"\adeleted\x18\x0f \x01(\bR\adeleted\x12\x13\n" +
	"\x05ns_id\x18\x10 \x01(\rR\x04nsId\x12\x19\n" +
	"\x06mnt_id\x18\x11 \x01(\x11:\x02-1R\x05mntId"

var (
	file_sk_unix_proto_rawDescOnce sync.Once
	file_sk_unix_proto_rawDescData []byte
)

func file_sk_unix_proto_rawDescGZIP() []byte {
	file_sk_unix_proto_rawDescOnce.Do(func() {
		file_sk_unix_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sk_unix_proto_rawDesc), len(file_sk_unix_proto_rawDesc)))
	})
	return file_sk_unix_proto_rawDescData
}

var file_sk_unix_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_sk_unix_proto_goTypes = []any{
	(*FilePermsEntry)(nil),      // 0: file_perms_entry
	(*UnixSkEntry)(nil),         // 1: unix_sk_entry
	(*fown.FownEntry)(nil),      // 2: fown_entry
	(*sk_opts.SkOptsEntry)(nil), // 3: sk_opts_entry
	(sk_opts.SkShutdown)(0),     // 4: sk_shutdown
}
var file_sk_unix_proto_depIdxs = []int32{
	2, // 0: unix_sk_entry.fown:type_name -> fown_entry
	3, // 1: unix_sk_entry.opts:type_name -> sk_opts_entry
	4, // 2: unix_sk_entry.shutdown:type_name -> sk_shutdown
	0, // 3: unix_sk_entry.file_perms:type_name -> file_perms_entry
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_sk_unix_proto_init() }
func file_sk_unix_proto_init() {
	if File_sk_unix_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sk_unix_proto_rawDesc), len(file_sk_unix_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sk_unix_proto_goTypes,
		DependencyIndexes: file_sk_unix_proto_depIdxs,
		MessageInfos:      file_sk_unix_proto_msgTypes,
	}.Build()
	File_sk_unix_proto = out.File
	file_sk_unix_proto_goTypes = nil
	file_sk_unix_proto_depIdxs = nil
}
