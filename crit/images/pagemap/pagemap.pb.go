// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.0
// source: pagemap.proto

package pagemap

import (
	_ "github.com/cedana/go-criu/v7/crit/images/opts"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PagemapHead struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PagesId       *uint32                `protobuf:"varint,1,req,name=pages_id,json=pagesId" json:"pages_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PagemapHead) Reset() {
	*x = PagemapHead{}
	mi := &file_pagemap_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PagemapHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagemapHead) ProtoMessage() {}

func (x *PagemapHead) ProtoReflect() protoreflect.Message {
	mi := &file_pagemap_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagemapHead.ProtoReflect.Descriptor instead.
func (*PagemapHead) Descriptor() ([]byte, []int) {
	return file_pagemap_proto_rawDescGZIP(), []int{0}
}

func (x *PagemapHead) GetPagesId() uint32 {
	if x != nil && x.PagesId != nil {
		return *x.PagesId
	}
	return 0
}

type PagemapEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vaddr         *uint64                `protobuf:"varint,1,req,name=vaddr" json:"vaddr,omitempty"`
	NrPages       *uint32                `protobuf:"varint,2,req,name=nr_pages,json=nrPages" json:"nr_pages,omitempty"`
	InParent      *bool                  `protobuf:"varint,3,opt,name=in_parent,json=inParent" json:"in_parent,omitempty"`
	Flags         *uint32                `protobuf:"varint,4,opt,name=flags" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PagemapEntry) Reset() {
	*x = PagemapEntry{}
	mi := &file_pagemap_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PagemapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagemapEntry) ProtoMessage() {}

func (x *PagemapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pagemap_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagemapEntry.ProtoReflect.Descriptor instead.
func (*PagemapEntry) Descriptor() ([]byte, []int) {
	return file_pagemap_proto_rawDescGZIP(), []int{1}
}

func (x *PagemapEntry) GetVaddr() uint64 {
	if x != nil && x.Vaddr != nil {
		return *x.Vaddr
	}
	return 0
}

func (x *PagemapEntry) GetNrPages() uint32 {
	if x != nil && x.NrPages != nil {
		return *x.NrPages
	}
	return 0
}

func (x *PagemapEntry) GetInParent() bool {
	if x != nil && x.InParent != nil {
		return *x.InParent
	}
	return false
}

func (x *PagemapEntry) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

var File_pagemap_proto protoreflect.FileDescriptor

const file_pagemap_proto_rawDesc = "" +
	"\n" +
	"\rpagemap.proto\x1a\n" +
	"opts.proto\")\n" +
	"\fpagemap_head\x12\x19\n" +
	"\bpages_id\x18\x01 \x02(\rR\apagesId\"\x8b\x01\n" +
	"\rpagemap_entry\x12\x1b\n" +
	"\x05vaddr\x18\x01 \x02(\x04B\x05\xd2?\x02\b\x01R\x05vaddr\x12\x19\n" +
	"\bnr_pages\x18\x02 \x02(\rR\anrPages\x12\x1b\n" +
	"\tin_parent\x18\x03 \x01(\bR\binParent\x12%\n" +
	"\x05flags\x18\x04 \x01(\rB\x0f\xd2?\f\x1a\n" +
	"pmap.flagsR\x05flags"

var (
	file_pagemap_proto_rawDescOnce sync.Once
	file_pagemap_proto_rawDescData []byte
)

func file_pagemap_proto_rawDescGZIP() []byte {
	file_pagemap_proto_rawDescOnce.Do(func() {
		file_pagemap_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pagemap_proto_rawDesc), len(file_pagemap_proto_rawDesc)))
	})
	return file_pagemap_proto_rawDescData
}

var file_pagemap_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pagemap_proto_goTypes = []any{
	(*PagemapHead)(nil),  // 0: pagemap_head
	(*PagemapEntry)(nil), // 1: pagemap_entry
}
var file_pagemap_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pagemap_proto_init() }
func file_pagemap_proto_init() {
	if File_pagemap_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pagemap_proto_rawDesc), len(file_pagemap_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pagemap_proto_goTypes,
		DependencyIndexes: file_pagemap_proto_depIdxs,
		MessageInfos:      file_pagemap_proto_msgTypes,
	}.Build()
	File_pagemap_proto = out.File
	file_pagemap_proto_goTypes = nil
	file_pagemap_proto_depIdxs = nil
}
