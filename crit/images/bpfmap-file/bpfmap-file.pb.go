// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.0
// source: bpfmap-file.proto

package bpfmap_file

import (
	fown "github.com/cedana/go-criu/v7/crit/images/fown"
	_ "github.com/cedana/go-criu/v7/crit/images/opts"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BpfmapFileEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Flags         *uint32                `protobuf:"varint,2,req,name=flags" json:"flags,omitempty"`
	Pos           *uint64                `protobuf:"varint,3,req,name=pos" json:"pos,omitempty"`
	Fown          *fown.FownEntry        `protobuf:"bytes,4,req,name=fown" json:"fown,omitempty"`
	MapType       *uint32                `protobuf:"varint,5,req,name=map_type,json=mapType" json:"map_type,omitempty"`
	KeySize       *uint32                `protobuf:"varint,6,req,name=key_size,json=keySize" json:"key_size,omitempty"`
	ValueSize     *uint32                `protobuf:"varint,7,req,name=value_size,json=valueSize" json:"value_size,omitempty"`
	MapId         *uint32                `protobuf:"varint,8,req,name=map_id,json=mapId" json:"map_id,omitempty"`
	MaxEntries    *uint32                `protobuf:"varint,9,req,name=max_entries,json=maxEntries" json:"max_entries,omitempty"`
	MapFlags      *uint32                `protobuf:"varint,10,req,name=map_flags,json=mapFlags" json:"map_flags,omitempty"`
	Memlock       *uint64                `protobuf:"varint,11,req,name=memlock" json:"memlock,omitempty"`
	Frozen        *bool                  `protobuf:"varint,12,req,name=frozen,def=0" json:"frozen,omitempty"`
	MapName       *string                `protobuf:"bytes,13,req,name=map_name,json=mapName" json:"map_name,omitempty"`
	Ifindex       *uint32                `protobuf:"varint,14,req,name=ifindex,def=0" json:"ifindex,omitempty"`
	MntId         *int32                 `protobuf:"zigzag32,15,opt,name=mnt_id,json=mntId,def=-1" json:"mnt_id,omitempty"`
	MapExtra      *uint64                `protobuf:"varint,16,opt,name=map_extra,json=mapExtra" json:"map_extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for BpfmapFileEntry fields.
const (
	Default_BpfmapFileEntry_Frozen  = bool(false)
	Default_BpfmapFileEntry_Ifindex = uint32(0)
	Default_BpfmapFileEntry_MntId   = int32(-1)
)

func (x *BpfmapFileEntry) Reset() {
	*x = BpfmapFileEntry{}
	mi := &file_bpfmap_file_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BpfmapFileEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BpfmapFileEntry) ProtoMessage() {}

func (x *BpfmapFileEntry) ProtoReflect() protoreflect.Message {
	mi := &file_bpfmap_file_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BpfmapFileEntry.ProtoReflect.Descriptor instead.
func (*BpfmapFileEntry) Descriptor() ([]byte, []int) {
	return file_bpfmap_file_proto_rawDescGZIP(), []int{0}
}

func (x *BpfmapFileEntry) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BpfmapFileEntry) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *BpfmapFileEntry) GetPos() uint64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *BpfmapFileEntry) GetFown() *fown.FownEntry {
	if x != nil {
		return x.Fown
	}
	return nil
}

func (x *BpfmapFileEntry) GetMapType() uint32 {
	if x != nil && x.MapType != nil {
		return *x.MapType
	}
	return 0
}

func (x *BpfmapFileEntry) GetKeySize() uint32 {
	if x != nil && x.KeySize != nil {
		return *x.KeySize
	}
	return 0
}

func (x *BpfmapFileEntry) GetValueSize() uint32 {
	if x != nil && x.ValueSize != nil {
		return *x.ValueSize
	}
	return 0
}

func (x *BpfmapFileEntry) GetMapId() uint32 {
	if x != nil && x.MapId != nil {
		return *x.MapId
	}
	return 0
}

func (x *BpfmapFileEntry) GetMaxEntries() uint32 {
	if x != nil && x.MaxEntries != nil {
		return *x.MaxEntries
	}
	return 0
}

func (x *BpfmapFileEntry) GetMapFlags() uint32 {
	if x != nil && x.MapFlags != nil {
		return *x.MapFlags
	}
	return 0
}

func (x *BpfmapFileEntry) GetMemlock() uint64 {
	if x != nil && x.Memlock != nil {
		return *x.Memlock
	}
	return 0
}

func (x *BpfmapFileEntry) GetFrozen() bool {
	if x != nil && x.Frozen != nil {
		return *x.Frozen
	}
	return Default_BpfmapFileEntry_Frozen
}

func (x *BpfmapFileEntry) GetMapName() string {
	if x != nil && x.MapName != nil {
		return *x.MapName
	}
	return ""
}

func (x *BpfmapFileEntry) GetIfindex() uint32 {
	if x != nil && x.Ifindex != nil {
		return *x.Ifindex
	}
	return Default_BpfmapFileEntry_Ifindex
}

func (x *BpfmapFileEntry) GetMntId() int32 {
	if x != nil && x.MntId != nil {
		return *x.MntId
	}
	return Default_BpfmapFileEntry_MntId
}

func (x *BpfmapFileEntry) GetMapExtra() uint64 {
	if x != nil && x.MapExtra != nil {
		return *x.MapExtra
	}
	return 0
}

var File_bpfmap_file_proto protoreflect.FileDescriptor

const file_bpfmap_file_proto_rawDesc = "" +
	"\n" +
	"\x11bpfmap-file.proto\x1a\n" +
	"opts.proto\x1a\n" +
	"fown.proto\"\xd1\x03\n" +
	"\x11bpfmap_file_entry\x12\x0e\n" +
	"\x02id\x18\x01 \x02(\rR\x02id\x12&\n" +
	"\x05flags\x18\x02 \x02(\rB\x10\xd2?\r\x1a\vrfile.flagsR\x05flags\x12\x10\n" +
	"\x03pos\x18\x03 \x02(\x04R\x03pos\x12\x1f\n" +
	"\x04fown\x18\x04 \x02(\v2\v.fown_entryR\x04fown\x12\x19\n" +
	"\bmap_type\x18\x05 \x02(\rR\amapType\x12\x19\n" +
	"\bkey_size\x18\x06 \x02(\rR\akeySize\x12\x1d\n" +
	"\n" +
	"value_size\x18\a \x02(\rR\tvalueSize\x12\x15\n" +
	"\x06map_id\x18\b \x02(\rR\x05mapId\x12\x1f\n" +
	"\vmax_entries\x18\t \x02(\rR\n" +
	"maxEntries\x12\x1b\n" +
	"\tmap_flags\x18\n" +
	" \x02(\rR\bmapFlags\x12\x18\n" +
	"\amemlock\x18\v \x02(\x04R\amemlock\x12\x1d\n" +
	"\x06frozen\x18\f \x02(\b:\x05falseR\x06frozen\x12\x19\n" +
	"\bmap_name\x18\r \x02(\tR\amapName\x12\x1b\n" +
	"\aifindex\x18\x0e \x02(\r:\x010R\aifindex\x12\x19\n" +
	"\x06mnt_id\x18\x0f \x01(\x11:\x02-1R\x05mntId\x12\x1b\n" +
	"\tmap_extra\x18\x10 \x01(\x04R\bmapExtra"

var (
	file_bpfmap_file_proto_rawDescOnce sync.Once
	file_bpfmap_file_proto_rawDescData []byte
)

func file_bpfmap_file_proto_rawDescGZIP() []byte {
	file_bpfmap_file_proto_rawDescOnce.Do(func() {
		file_bpfmap_file_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_bpfmap_file_proto_rawDesc), len(file_bpfmap_file_proto_rawDesc)))
	})
	return file_bpfmap_file_proto_rawDescData
}

var file_bpfmap_file_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_bpfmap_file_proto_goTypes = []any{
	(*BpfmapFileEntry)(nil), // 0: bpfmap_file_entry
	(*fown.FownEntry)(nil),  // 1: fown_entry
}
var file_bpfmap_file_proto_depIdxs = []int32{
	1, // 0: bpfmap_file_entry.fown:type_name -> fown_entry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_bpfmap_file_proto_init() }
func file_bpfmap_file_proto_init() {
	if File_bpfmap_file_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_bpfmap_file_proto_rawDesc), len(file_bpfmap_file_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bpfmap_file_proto_goTypes,
		DependencyIndexes: file_bpfmap_file_proto_depIdxs,
		MessageInfos:      file_bpfmap_file_proto_msgTypes,
	}.Build()
	File_bpfmap_file_proto = out.File
	file_bpfmap_file_proto_goTypes = nil
	file_bpfmap_file_proto_depIdxs = nil
}
