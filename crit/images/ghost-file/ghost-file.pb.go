// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.0
// source: ghost-file.proto

package ghost_file

import (
	_ "github.com/cedana/go-criu/v7/crit/images/opts"
	time "github.com/cedana/go-criu/v7/crit/images/time"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GhostFileEntry struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Uid    *uint32                `protobuf:"varint,1,req,name=uid" json:"uid,omitempty"`
	Gid    *uint32                `protobuf:"varint,2,req,name=gid" json:"gid,omitempty"`
	Mode   *uint32                `protobuf:"varint,3,req,name=mode" json:"mode,omitempty"`
	Dev    *uint32                `protobuf:"varint,4,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64                `protobuf:"varint,5,opt,name=ino" json:"ino,omitempty"`
	Rdev   *uint32                `protobuf:"varint,6,opt,name=rdev" json:"rdev,omitempty"`
	Atim   *time.Timeval          `protobuf:"bytes,7,opt,name=atim" json:"atim,omitempty"`
	Mtim   *time.Timeval          `protobuf:"bytes,8,opt,name=mtim" json:"mtim,omitempty"`
	Chunks *bool                  `protobuf:"varint,9,opt,name=chunks" json:"chunks,omitempty"`
	Size   *uint64                `protobuf:"varint,10,opt,name=size" json:"size,omitempty"`
	// this field makes sense only when S_ISLNK(mode)
	SymlnkTarget  *string `protobuf:"bytes,11,opt,name=symlnk_target,json=symlnkTarget" json:"symlnk_target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GhostFileEntry) Reset() {
	*x = GhostFileEntry{}
	mi := &file_ghost_file_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GhostFileEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GhostFileEntry) ProtoMessage() {}

func (x *GhostFileEntry) ProtoReflect() protoreflect.Message {
	mi := &file_ghost_file_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GhostFileEntry.ProtoReflect.Descriptor instead.
func (*GhostFileEntry) Descriptor() ([]byte, []int) {
	return file_ghost_file_proto_rawDescGZIP(), []int{0}
}

func (x *GhostFileEntry) GetUid() uint32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *GhostFileEntry) GetGid() uint32 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *GhostFileEntry) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *GhostFileEntry) GetDev() uint32 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *GhostFileEntry) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *GhostFileEntry) GetRdev() uint32 {
	if x != nil && x.Rdev != nil {
		return *x.Rdev
	}
	return 0
}

func (x *GhostFileEntry) GetAtim() *time.Timeval {
	if x != nil {
		return x.Atim
	}
	return nil
}

func (x *GhostFileEntry) GetMtim() *time.Timeval {
	if x != nil {
		return x.Mtim
	}
	return nil
}

func (x *GhostFileEntry) GetChunks() bool {
	if x != nil && x.Chunks != nil {
		return *x.Chunks
	}
	return false
}

func (x *GhostFileEntry) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *GhostFileEntry) GetSymlnkTarget() string {
	if x != nil && x.SymlnkTarget != nil {
		return *x.SymlnkTarget
	}
	return ""
}

type GhostChunkEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Len           *uint64                `protobuf:"varint,1,req,name=len" json:"len,omitempty"`
	Off           *uint64                `protobuf:"varint,2,req,name=off" json:"off,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GhostChunkEntry) Reset() {
	*x = GhostChunkEntry{}
	mi := &file_ghost_file_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GhostChunkEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GhostChunkEntry) ProtoMessage() {}

func (x *GhostChunkEntry) ProtoReflect() protoreflect.Message {
	mi := &file_ghost_file_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GhostChunkEntry.ProtoReflect.Descriptor instead.
func (*GhostChunkEntry) Descriptor() ([]byte, []int) {
	return file_ghost_file_proto_rawDescGZIP(), []int{1}
}

func (x *GhostChunkEntry) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *GhostChunkEntry) GetOff() uint64 {
	if x != nil && x.Off != nil {
		return *x.Off
	}
	return 0
}

var File_ghost_file_proto protoreflect.FileDescriptor

const file_ghost_file_proto_rawDesc = "" +
	"\n" +
	"\x10ghost-file.proto\x1a\n" +
	"opts.proto\x1a\n" +
	"time.proto\"\x9f\x02\n" +
	"\x10ghost_file_entry\x12\x10\n" +
	"\x03uid\x18\x01 \x02(\rR\x03uid\x12\x10\n" +
	"\x03gid\x18\x02 \x02(\rR\x03gid\x12\x12\n" +
	"\x04mode\x18\x03 \x02(\rR\x04mode\x12\x17\n" +
	"\x03dev\x18\x04 \x01(\rB\x05\x92~\x02 \x01R\x03dev\x12\x10\n" +
	"\x03ino\x18\x05 \x01(\x04R\x03ino\x12\x1b\n" +
	"\x04rdev\x18\x06 \x01(\rB\a\x92~\x04 \x01(\x01R\x04rdev\x12\x1c\n" +
	"\x04atim\x18\a \x01(\v2\b.timevalR\x04atim\x12\x1c\n" +
	"\x04mtim\x18\b \x01(\v2\b.timevalR\x04mtim\x12\x16\n" +
	"\x06chunks\x18\t \x01(\bR\x06chunks\x12\x12\n" +
	"\x04size\x18\n" +
	" \x01(\x04R\x04size\x12#\n" +
	"\rsymlnk_target\x18\v \x01(\tR\fsymlnkTarget\"7\n" +
	"\x11ghost_chunk_entry\x12\x10\n" +
	"\x03len\x18\x01 \x02(\x04R\x03len\x12\x10\n" +
	"\x03off\x18\x02 \x02(\x04R\x03off"

var (
	file_ghost_file_proto_rawDescOnce sync.Once
	file_ghost_file_proto_rawDescData []byte
)

func file_ghost_file_proto_rawDescGZIP() []byte {
	file_ghost_file_proto_rawDescOnce.Do(func() {
		file_ghost_file_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ghost_file_proto_rawDesc), len(file_ghost_file_proto_rawDesc)))
	})
	return file_ghost_file_proto_rawDescData
}

var file_ghost_file_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ghost_file_proto_goTypes = []any{
	(*GhostFileEntry)(nil),  // 0: ghost_file_entry
	(*GhostChunkEntry)(nil), // 1: ghost_chunk_entry
	(*time.Timeval)(nil),    // 2: timeval
}
var file_ghost_file_proto_depIdxs = []int32{
	2, // 0: ghost_file_entry.atim:type_name -> timeval
	2, // 1: ghost_file_entry.mtim:type_name -> timeval
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ghost_file_proto_init() }
func file_ghost_file_proto_init() {
	if File_ghost_file_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ghost_file_proto_rawDesc), len(file_ghost_file_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ghost_file_proto_goTypes,
		DependencyIndexes: file_ghost_file_proto_depIdxs,
		MessageInfos:      file_ghost_file_proto_msgTypes,
	}.Build()
	File_ghost_file_proto = out.File
	file_ghost_file_proto_goTypes = nil
	file_ghost_file_proto_depIdxs = nil
}
