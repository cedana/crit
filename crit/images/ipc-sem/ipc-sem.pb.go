// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.0
// source: ipc-sem.proto

package ipc_sem

import (
	ipc_desc "github.com/cedana/go-criu/v7/crit/images/ipc-desc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IpcSemEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Desc          *ipc_desc.IpcDescEntry `protobuf:"bytes,1,req,name=desc" json:"desc,omitempty"`
	Nsems         *uint32                `protobuf:"varint,2,req,name=nsems" json:"nsems,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpcSemEntry) Reset() {
	*x = IpcSemEntry{}
	mi := &file_ipc_sem_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpcSemEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpcSemEntry) ProtoMessage() {}

func (x *IpcSemEntry) ProtoReflect() protoreflect.Message {
	mi := &file_ipc_sem_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpcSemEntry.ProtoReflect.Descriptor instead.
func (*IpcSemEntry) Descriptor() ([]byte, []int) {
	return file_ipc_sem_proto_rawDescGZIP(), []int{0}
}

func (x *IpcSemEntry) GetDesc() *ipc_desc.IpcDescEntry {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *IpcSemEntry) GetNsems() uint32 {
	if x != nil && x.Nsems != nil {
		return *x.Nsems
	}
	return 0
}

var File_ipc_sem_proto protoreflect.FileDescriptor

const file_ipc_sem_proto_rawDesc = "" +
	"\n" +
	"\ripc-sem.proto\x1a\x0eipc-desc.proto\"J\n" +
	"\ripc_sem_entry\x12#\n" +
	"\x04desc\x18\x01 \x02(\v2\x0f.ipc_desc_entryR\x04desc\x12\x14\n" +
	"\x05nsems\x18\x02 \x02(\rR\x05nsems"

var (
	file_ipc_sem_proto_rawDescOnce sync.Once
	file_ipc_sem_proto_rawDescData []byte
)

func file_ipc_sem_proto_rawDescGZIP() []byte {
	file_ipc_sem_proto_rawDescOnce.Do(func() {
		file_ipc_sem_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ipc_sem_proto_rawDesc), len(file_ipc_sem_proto_rawDesc)))
	})
	return file_ipc_sem_proto_rawDescData
}

var file_ipc_sem_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ipc_sem_proto_goTypes = []any{
	(*IpcSemEntry)(nil),           // 0: ipc_sem_entry
	(*ipc_desc.IpcDescEntry)(nil), // 1: ipc_desc_entry
}
var file_ipc_sem_proto_depIdxs = []int32{
	1, // 0: ipc_sem_entry.desc:type_name -> ipc_desc_entry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ipc_sem_proto_init() }
func file_ipc_sem_proto_init() {
	if File_ipc_sem_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ipc_sem_proto_rawDesc), len(file_ipc_sem_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ipc_sem_proto_goTypes,
		DependencyIndexes: file_ipc_sem_proto_depIdxs,
		MessageInfos:      file_ipc_sem_proto_msgTypes,
	}.Build()
	File_ipc_sem_proto = out.File
	file_ipc_sem_proto_goTypes = nil
	file_ipc_sem_proto_depIdxs = nil
}
