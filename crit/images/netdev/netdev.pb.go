// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.0
// source: netdev.proto

package netdev

import (
	macvlan "github.com/cedana/go-criu/v7/crit/images/macvlan"
	_ "github.com/cedana/go-criu/v7/crit/images/opts"
	sit "github.com/cedana/go-criu/v7/crit/images/sit"
	sysctl "github.com/cedana/go-criu/v7/crit/images/sysctl"
	tun "github.com/cedana/go-criu/v7/crit/images/tun"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NdType int32

const (
	NdType_LOOPBACK NdType = 1
	NdType_VETH     NdType = 2
	NdType_TUN      NdType = 3
	// External link -- for those CRIU only dumps and restores
	// link parameters such as flags, address, MTU, etc. The
	// existence of the link on restore should be provided
	// by the setup-namespaces script.
	NdType_EXTLINK NdType = 4
	NdType_VENET   NdType = 5 // OpenVZ device
	NdType_BRIDGE  NdType = 6
	NdType_MACVLAN NdType = 7
	NdType_SIT     NdType = 8
)

// Enum value maps for NdType.
var (
	NdType_name = map[int32]string{
		1: "LOOPBACK",
		2: "VETH",
		3: "TUN",
		4: "EXTLINK",
		5: "VENET",
		6: "BRIDGE",
		7: "MACVLAN",
		8: "SIT",
	}
	NdType_value = map[string]int32{
		"LOOPBACK": 1,
		"VETH":     2,
		"TUN":      3,
		"EXTLINK":  4,
		"VENET":    5,
		"BRIDGE":   6,
		"MACVLAN":  7,
		"SIT":      8,
	}
)

func (x NdType) Enum() *NdType {
	p := new(NdType)
	*p = x
	return p
}

func (x NdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NdType) Descriptor() protoreflect.EnumDescriptor {
	return file_netdev_proto_enumTypes[0].Descriptor()
}

func (NdType) Type() protoreflect.EnumType {
	return &file_netdev_proto_enumTypes[0]
}

func (x NdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NdType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NdType(num)
	return nil
}

// Deprecated: Use NdType.Descriptor instead.
func (NdType) EnumDescriptor() ([]byte, []int) {
	return file_netdev_proto_rawDescGZIP(), []int{0}
}

type NetDeviceEntry struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Type          *NdType                   `protobuf:"varint,1,req,name=type,enum=NdType" json:"type,omitempty"`
	Ifindex       *uint32                   `protobuf:"varint,2,req,name=ifindex" json:"ifindex,omitempty"`
	Mtu           *uint32                   `protobuf:"varint,3,req,name=mtu" json:"mtu,omitempty"`
	Flags         *uint32                   `protobuf:"varint,4,req,name=flags" json:"flags,omitempty"`
	Name          *string                   `protobuf:"bytes,5,req,name=name" json:"name,omitempty"`
	Tun           *tun.TunLinkEntry         `protobuf:"bytes,6,opt,name=tun" json:"tun,omitempty"`
	Address       []byte                    `protobuf:"bytes,7,opt,name=address" json:"address,omitempty"`
	Conf          []int32                   `protobuf:"varint,8,rep,name=conf" json:"conf,omitempty"`
	Conf4         []*sysctl.SysctlEntry     `protobuf:"bytes,9,rep,name=conf4" json:"conf4,omitempty"`
	Conf6         []*sysctl.SysctlEntry     `protobuf:"bytes,10,rep,name=conf6" json:"conf6,omitempty"`
	Macvlan       *macvlan.MacvlanLinkEntry `protobuf:"bytes,11,opt,name=macvlan" json:"macvlan,omitempty"`
	PeerIfindex   *uint32                   `protobuf:"varint,12,opt,name=peer_ifindex,json=peerIfindex" json:"peer_ifindex,omitempty"`
	PeerNsid      *uint32                   `protobuf:"varint,13,opt,name=peer_nsid,json=peerNsid" json:"peer_nsid,omitempty"`
	Master        *uint32                   `protobuf:"varint,14,opt,name=master" json:"master,omitempty"`
	Sit           *sit.SitEntry             `protobuf:"bytes,15,opt,name=sit" json:"sit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetDeviceEntry) Reset() {
	*x = NetDeviceEntry{}
	mi := &file_netdev_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetDeviceEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetDeviceEntry) ProtoMessage() {}

func (x *NetDeviceEntry) ProtoReflect() protoreflect.Message {
	mi := &file_netdev_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetDeviceEntry.ProtoReflect.Descriptor instead.
func (*NetDeviceEntry) Descriptor() ([]byte, []int) {
	return file_netdev_proto_rawDescGZIP(), []int{0}
}

func (x *NetDeviceEntry) GetType() NdType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return NdType_LOOPBACK
}

func (x *NetDeviceEntry) GetIfindex() uint32 {
	if x != nil && x.Ifindex != nil {
		return *x.Ifindex
	}
	return 0
}

func (x *NetDeviceEntry) GetMtu() uint32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

func (x *NetDeviceEntry) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *NetDeviceEntry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetDeviceEntry) GetTun() *tun.TunLinkEntry {
	if x != nil {
		return x.Tun
	}
	return nil
}

func (x *NetDeviceEntry) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *NetDeviceEntry) GetConf() []int32 {
	if x != nil {
		return x.Conf
	}
	return nil
}

func (x *NetDeviceEntry) GetConf4() []*sysctl.SysctlEntry {
	if x != nil {
		return x.Conf4
	}
	return nil
}

func (x *NetDeviceEntry) GetConf6() []*sysctl.SysctlEntry {
	if x != nil {
		return x.Conf6
	}
	return nil
}

func (x *NetDeviceEntry) GetMacvlan() *macvlan.MacvlanLinkEntry {
	if x != nil {
		return x.Macvlan
	}
	return nil
}

func (x *NetDeviceEntry) GetPeerIfindex() uint32 {
	if x != nil && x.PeerIfindex != nil {
		return *x.PeerIfindex
	}
	return 0
}

func (x *NetDeviceEntry) GetPeerNsid() uint32 {
	if x != nil && x.PeerNsid != nil {
		return *x.PeerNsid
	}
	return 0
}

func (x *NetDeviceEntry) GetMaster() uint32 {
	if x != nil && x.Master != nil {
		return *x.Master
	}
	return 0
}

func (x *NetDeviceEntry) GetSit() *sit.SitEntry {
	if x != nil {
		return x.Sit
	}
	return nil
}

type NetnsId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is CRIU's id which is allocated for each namespace
	TargetNsId *uint32 `protobuf:"varint,1,req,name=target_ns_id,json=targetNsId" json:"target_ns_id,omitempty"`
	// This is an id which can be used to address this namespace
	// from another network namespace. Each network namespace has
	// one set of id-s for other namespaces.
	NetnsidValue  *int32 `protobuf:"varint,2,req,name=netnsid_value,json=netnsidValue" json:"netnsid_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetnsId) Reset() {
	*x = NetnsId{}
	mi := &file_netdev_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetnsId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetnsId) ProtoMessage() {}

func (x *NetnsId) ProtoReflect() protoreflect.Message {
	mi := &file_netdev_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetnsId.ProtoReflect.Descriptor instead.
func (*NetnsId) Descriptor() ([]byte, []int) {
	return file_netdev_proto_rawDescGZIP(), []int{1}
}

func (x *NetnsId) GetTargetNsId() uint32 {
	if x != nil && x.TargetNsId != nil {
		return *x.TargetNsId
	}
	return 0
}

func (x *NetnsId) GetNetnsidValue() int32 {
	if x != nil && x.NetnsidValue != nil {
		return *x.NetnsidValue
	}
	return 0
}

type NetnsEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DefConf       []int32                `protobuf:"varint,1,rep,name=def_conf,json=defConf" json:"def_conf,omitempty"`
	AllConf       []int32                `protobuf:"varint,2,rep,name=all_conf,json=allConf" json:"all_conf,omitempty"`
	DefConf4      []*sysctl.SysctlEntry  `protobuf:"bytes,3,rep,name=def_conf4,json=defConf4" json:"def_conf4,omitempty"`
	AllConf4      []*sysctl.SysctlEntry  `protobuf:"bytes,4,rep,name=all_conf4,json=allConf4" json:"all_conf4,omitempty"`
	DefConf6      []*sysctl.SysctlEntry  `protobuf:"bytes,5,rep,name=def_conf6,json=defConf6" json:"def_conf6,omitempty"`
	AllConf6      []*sysctl.SysctlEntry  `protobuf:"bytes,6,rep,name=all_conf6,json=allConf6" json:"all_conf6,omitempty"`
	Nsids         []*NetnsId             `protobuf:"bytes,7,rep,name=nsids" json:"nsids,omitempty"`
	ExtKey        *string                `protobuf:"bytes,8,opt,name=ext_key,json=extKey" json:"ext_key,omitempty"`
	UnixConf      []*sysctl.SysctlEntry  `protobuf:"bytes,9,rep,name=unix_conf,json=unixConf" json:"unix_conf,omitempty"`
	Ipv4Sysctl    []*sysctl.SysctlEntry  `protobuf:"bytes,10,rep,name=ipv4_sysctl,json=ipv4Sysctl" json:"ipv4_sysctl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetnsEntry) Reset() {
	*x = NetnsEntry{}
	mi := &file_netdev_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetnsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetnsEntry) ProtoMessage() {}

func (x *NetnsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_netdev_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetnsEntry.ProtoReflect.Descriptor instead.
func (*NetnsEntry) Descriptor() ([]byte, []int) {
	return file_netdev_proto_rawDescGZIP(), []int{2}
}

func (x *NetnsEntry) GetDefConf() []int32 {
	if x != nil {
		return x.DefConf
	}
	return nil
}

func (x *NetnsEntry) GetAllConf() []int32 {
	if x != nil {
		return x.AllConf
	}
	return nil
}

func (x *NetnsEntry) GetDefConf4() []*sysctl.SysctlEntry {
	if x != nil {
		return x.DefConf4
	}
	return nil
}

func (x *NetnsEntry) GetAllConf4() []*sysctl.SysctlEntry {
	if x != nil {
		return x.AllConf4
	}
	return nil
}

func (x *NetnsEntry) GetDefConf6() []*sysctl.SysctlEntry {
	if x != nil {
		return x.DefConf6
	}
	return nil
}

func (x *NetnsEntry) GetAllConf6() []*sysctl.SysctlEntry {
	if x != nil {
		return x.AllConf6
	}
	return nil
}

func (x *NetnsEntry) GetNsids() []*NetnsId {
	if x != nil {
		return x.Nsids
	}
	return nil
}

func (x *NetnsEntry) GetExtKey() string {
	if x != nil && x.ExtKey != nil {
		return *x.ExtKey
	}
	return ""
}

func (x *NetnsEntry) GetUnixConf() []*sysctl.SysctlEntry {
	if x != nil {
		return x.UnixConf
	}
	return nil
}

func (x *NetnsEntry) GetIpv4Sysctl() []*sysctl.SysctlEntry {
	if x != nil {
		return x.Ipv4Sysctl
	}
	return nil
}

var File_netdev_proto protoreflect.FileDescriptor

const file_netdev_proto_rawDesc = "" +
	"\n" +
	"\fnetdev.proto\x1a\rmacvlan.proto\x1a\n" +
	"opts.proto\x1a\ttun.proto\x1a\fsysctl.proto\x1a\tsit.proto\"\xcd\x03\n" +
	"\x10net_device_entry\x12\x1c\n" +
	"\x04type\x18\x01 \x02(\x0e2\b.nd_typeR\x04type\x12\x18\n" +
	"\aifindex\x18\x02 \x02(\rR\aifindex\x12\x10\n" +
	"\x03mtu\x18\x03 \x02(\rR\x03mtu\x12\x1b\n" +
	"\x05flags\x18\x04 \x02(\rB\x05\x92~\x02\b\x01R\x05flags\x12\x12\n" +
	"\x04name\x18\x05 \x02(\tR\x04name\x12!\n" +
	"\x03tun\x18\x06 \x01(\v2\x0f.tun_link_entryR\x03tun\x12\x18\n" +
	"\aaddress\x18\a \x01(\fR\aaddress\x12\x12\n" +
	"\x04conf\x18\b \x03(\x05R\x04conf\x12#\n" +
	"\x05conf4\x18\t \x03(\v2\r.sysctl_entryR\x05conf4\x12#\n" +
	"\x05conf6\x18\n" +
	" \x03(\v2\r.sysctl_entryR\x05conf6\x12-\n" +
	"\amacvlan\x18\v \x01(\v2\x13.macvlan_link_entryR\amacvlan\x12!\n" +
	"\fpeer_ifindex\x18\f \x01(\rR\vpeerIfindex\x12\x1b\n" +
	"\tpeer_nsid\x18\r \x01(\rR\bpeerNsid\x12\x16\n" +
	"\x06master\x18\x0e \x01(\rR\x06master\x12\x1c\n" +
	"\x03sit\x18\x0f \x01(\v2\n" +
	".sit_entryR\x03sit\"Q\n" +
	"\bnetns_id\x12 \n" +
	"\ftarget_ns_id\x18\x01 \x02(\rR\n" +
	"targetNsId\x12#\n" +
	"\rnetnsid_value\x18\x02 \x02(\x05R\fnetnsidValue\"\x89\x03\n" +
	"\vnetns_entry\x12\x19\n" +
	"\bdef_conf\x18\x01 \x03(\x05R\adefConf\x12\x19\n" +
	"\ball_conf\x18\x02 \x03(\x05R\aallConf\x12*\n" +
	"\tdef_conf4\x18\x03 \x03(\v2\r.sysctl_entryR\bdefConf4\x12*\n" +
	"\tall_conf4\x18\x04 \x03(\v2\r.sysctl_entryR\ballConf4\x12*\n" +
	"\tdef_conf6\x18\x05 \x03(\v2\r.sysctl_entryR\bdefConf6\x12*\n" +
	"\tall_conf6\x18\x06 \x03(\v2\r.sysctl_entryR\ballConf6\x12\x1f\n" +
	"\x05nsids\x18\a \x03(\v2\t.netns_idR\x05nsids\x12\x17\n" +
	"\aext_key\x18\b \x01(\tR\x06extKey\x12*\n" +
	"\tunix_conf\x18\t \x03(\v2\r.sysctl_entryR\bunixConf\x12.\n" +
	"\vipv4_sysctl\x18\n" +
	" \x03(\v2\r.sysctl_entryR\n" +
	"ipv4Sysctl*d\n" +
	"\and_type\x12\f\n" +
	"\bLOOPBACK\x10\x01\x12\b\n" +
	"\x04VETH\x10\x02\x12\a\n" +
	"\x03TUN\x10\x03\x12\v\n" +
	"\aEXTLINK\x10\x04\x12\t\n" +
	"\x05VENET\x10\x05\x12\n" +
	"\n" +
	"\x06BRIDGE\x10\x06\x12\v\n" +
	"\aMACVLAN\x10\a\x12\a\n" +
	"\x03SIT\x10\b"

var (
	file_netdev_proto_rawDescOnce sync.Once
	file_netdev_proto_rawDescData []byte
)

func file_netdev_proto_rawDescGZIP() []byte {
	file_netdev_proto_rawDescOnce.Do(func() {
		file_netdev_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_netdev_proto_rawDesc), len(file_netdev_proto_rawDesc)))
	})
	return file_netdev_proto_rawDescData
}

var file_netdev_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_netdev_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_netdev_proto_goTypes = []any{
	(NdType)(0),                      // 0: nd_type
	(*NetDeviceEntry)(nil),           // 1: net_device_entry
	(*NetnsId)(nil),                  // 2: netns_id
	(*NetnsEntry)(nil),               // 3: netns_entry
	(*tun.TunLinkEntry)(nil),         // 4: tun_link_entry
	(*sysctl.SysctlEntry)(nil),       // 5: sysctl_entry
	(*macvlan.MacvlanLinkEntry)(nil), // 6: macvlan_link_entry
	(*sit.SitEntry)(nil),             // 7: sit_entry
}
var file_netdev_proto_depIdxs = []int32{
	0,  // 0: net_device_entry.type:type_name -> nd_type
	4,  // 1: net_device_entry.tun:type_name -> tun_link_entry
	5,  // 2: net_device_entry.conf4:type_name -> sysctl_entry
	5,  // 3: net_device_entry.conf6:type_name -> sysctl_entry
	6,  // 4: net_device_entry.macvlan:type_name -> macvlan_link_entry
	7,  // 5: net_device_entry.sit:type_name -> sit_entry
	5,  // 6: netns_entry.def_conf4:type_name -> sysctl_entry
	5,  // 7: netns_entry.all_conf4:type_name -> sysctl_entry
	5,  // 8: netns_entry.def_conf6:type_name -> sysctl_entry
	5,  // 9: netns_entry.all_conf6:type_name -> sysctl_entry
	2,  // 10: netns_entry.nsids:type_name -> netns_id
	5,  // 11: netns_entry.unix_conf:type_name -> sysctl_entry
	5,  // 12: netns_entry.ipv4_sysctl:type_name -> sysctl_entry
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_netdev_proto_init() }
func file_netdev_proto_init() {
	if File_netdev_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_netdev_proto_rawDesc), len(file_netdev_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_netdev_proto_goTypes,
		DependencyIndexes: file_netdev_proto_depIdxs,
		EnumInfos:         file_netdev_proto_enumTypes,
		MessageInfos:      file_netdev_proto_msgTypes,
	}.Build()
	File_netdev_proto = out.File
	file_netdev_proto_goTypes = nil
	file_netdev_proto_depIdxs = nil
}
