// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.0
// source: memfd.proto

package memfd

import (
	fown "github.com/cedana/go-criu/v7/crit/images/fown"
	_ "github.com/cedana/go-criu/v7/crit/images/opts"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MemfdFileEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Flags         *uint32                `protobuf:"varint,2,req,name=flags" json:"flags,omitempty"`
	Pos           *uint64                `protobuf:"varint,3,req,name=pos" json:"pos,omitempty"`
	Fown          *fown.FownEntry        `protobuf:"bytes,4,req,name=fown" json:"fown,omitempty"`
	InodeId       *uint32                `protobuf:"varint,5,req,name=inode_id,json=inodeId" json:"inode_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemfdFileEntry) Reset() {
	*x = MemfdFileEntry{}
	mi := &file_memfd_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemfdFileEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemfdFileEntry) ProtoMessage() {}

func (x *MemfdFileEntry) ProtoReflect() protoreflect.Message {
	mi := &file_memfd_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemfdFileEntry.ProtoReflect.Descriptor instead.
func (*MemfdFileEntry) Descriptor() ([]byte, []int) {
	return file_memfd_proto_rawDescGZIP(), []int{0}
}

func (x *MemfdFileEntry) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MemfdFileEntry) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *MemfdFileEntry) GetPos() uint64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *MemfdFileEntry) GetFown() *fown.FownEntry {
	if x != nil {
		return x.Fown
	}
	return nil
}

func (x *MemfdFileEntry) GetInodeId() uint32 {
	if x != nil && x.InodeId != nil {
		return *x.InodeId
	}
	return 0
}

type MemfdInodeEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Uid           *uint32                `protobuf:"varint,2,req,name=uid" json:"uid,omitempty"`
	Gid           *uint32                `protobuf:"varint,3,req,name=gid" json:"gid,omitempty"`
	Size          *uint64                `protobuf:"varint,4,req,name=size" json:"size,omitempty"`
	Shmid         *uint32                `protobuf:"varint,5,req,name=shmid" json:"shmid,omitempty"`
	Seals         *uint32                `protobuf:"varint,6,req,name=seals" json:"seals,omitempty"`
	InodeId       *uint64                `protobuf:"varint,7,req,name=inode_id,json=inodeId" json:"inode_id,omitempty"`
	HugetlbFlag   *uint32                `protobuf:"varint,8,opt,name=hugetlb_flag,json=hugetlbFlag" json:"hugetlb_flag,omitempty"`
	Mode          *uint32                `protobuf:"varint,9,opt,name=mode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemfdInodeEntry) Reset() {
	*x = MemfdInodeEntry{}
	mi := &file_memfd_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemfdInodeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemfdInodeEntry) ProtoMessage() {}

func (x *MemfdInodeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_memfd_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemfdInodeEntry.ProtoReflect.Descriptor instead.
func (*MemfdInodeEntry) Descriptor() ([]byte, []int) {
	return file_memfd_proto_rawDescGZIP(), []int{1}
}

func (x *MemfdInodeEntry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MemfdInodeEntry) GetUid() uint32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *MemfdInodeEntry) GetGid() uint32 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *MemfdInodeEntry) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *MemfdInodeEntry) GetShmid() uint32 {
	if x != nil && x.Shmid != nil {
		return *x.Shmid
	}
	return 0
}

func (x *MemfdInodeEntry) GetSeals() uint32 {
	if x != nil && x.Seals != nil {
		return *x.Seals
	}
	return 0
}

func (x *MemfdInodeEntry) GetInodeId() uint64 {
	if x != nil && x.InodeId != nil {
		return *x.InodeId
	}
	return 0
}

func (x *MemfdInodeEntry) GetHugetlbFlag() uint32 {
	if x != nil && x.HugetlbFlag != nil {
		return *x.HugetlbFlag
	}
	return 0
}

func (x *MemfdInodeEntry) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

var File_memfd_proto protoreflect.FileDescriptor

const file_memfd_proto_rawDesc = "" +
	"\n" +
	"\vmemfd.proto\x1a\n" +
	"opts.proto\x1a\n" +
	"fown.proto\"\x98\x01\n" +
	"\x10memfd_file_entry\x12\x0e\n" +
	"\x02id\x18\x01 \x02(\rR\x02id\x12&\n" +
	"\x05flags\x18\x02 \x02(\rB\x10\xd2?\r\x1a\vrfile.flagsR\x05flags\x12\x10\n" +
	"\x03pos\x18\x03 \x02(\x04R\x03pos\x12\x1f\n" +
	"\x04fown\x18\x04 \x02(\v2\v.fown_entryR\x04fown\x12\x19\n" +
	"\binode_id\x18\x05 \x02(\rR\ainodeId\"\xef\x01\n" +
	"\x11memfd_inode_entry\x12\x12\n" +
	"\x04name\x18\x01 \x02(\tR\x04name\x12\x10\n" +
	"\x03uid\x18\x02 \x02(\rR\x03uid\x12\x10\n" +
	"\x03gid\x18\x03 \x02(\rR\x03gid\x12\x12\n" +
	"\x04size\x18\x04 \x02(\x04R\x04size\x12\x14\n" +
	"\x05shmid\x18\x05 \x02(\rR\x05shmid\x12&\n" +
	"\x05seals\x18\x06 \x02(\rB\x10\xd2?\r\x1a\vseals.flagsR\x05seals\x12\x19\n" +
	"\binode_id\x18\a \x02(\x04R\ainodeId\x12!\n" +
	"\fhugetlb_flag\x18\b \x01(\rR\vhugetlbFlag\x12\x12\n" +
	"\x04mode\x18\t \x01(\rR\x04mode"

var (
	file_memfd_proto_rawDescOnce sync.Once
	file_memfd_proto_rawDescData []byte
)

func file_memfd_proto_rawDescGZIP() []byte {
	file_memfd_proto_rawDescOnce.Do(func() {
		file_memfd_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_memfd_proto_rawDesc), len(file_memfd_proto_rawDesc)))
	})
	return file_memfd_proto_rawDescData
}

var file_memfd_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_memfd_proto_goTypes = []any{
	(*MemfdFileEntry)(nil),  // 0: memfd_file_entry
	(*MemfdInodeEntry)(nil), // 1: memfd_inode_entry
	(*fown.FownEntry)(nil),  // 2: fown_entry
}
var file_memfd_proto_depIdxs = []int32{
	2, // 0: memfd_file_entry.fown:type_name -> fown_entry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_memfd_proto_init() }
func file_memfd_proto_init() {
	if File_memfd_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_memfd_proto_rawDesc), len(file_memfd_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_memfd_proto_goTypes,
		DependencyIndexes: file_memfd_proto_depIdxs,
		MessageInfos:      file_memfd_proto_msgTypes,
	}.Build()
	File_memfd_proto = out.File
	file_memfd_proto_goTypes = nil
	file_memfd_proto_depIdxs = nil
}
